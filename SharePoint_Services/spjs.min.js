/* SP.JS WRAPPER 1.0.2 */
/* https://github.com/usaalex/SharePoint */
/* © WM-FDH, 2016 */ 
var SPJS = function (e) { function t(e) { this.name = "ArgumentNullException", this.message = "Value can not be null or undefined. Parameter name: " + e, this.stack = (new Error).stack } function n(e, t) { this.name = "ArgumentException", this.message = (t || "Argument exception") + ". Parameter name: " + e, this.stack = (new Error).stack } function r(n, r, o, i) { if (!n) throw new t("list"); var s = e.Deferred(), a = SP.ClientContext.get_current(), l = i ? a.get_site().get_rootWeb() : a.get_web(), u = "string" == typeof n ? l.get_lists().getByTitle(n) : n, c = new SP.CamlQuery; c.set_viewXml(r || ""); var g = u.getItems(c); return o ? a.load(g, "Include(ID," + o.join(",") + ")") : a.load(g), a.executeQueryAsync(function (e, t) { s.resolve(g.$2_1, e, t) }, function (e, t) { s.reject(t, e) }), s.promise() } function o(r, o, i, s) { if (!r) throw new t("list"); if (!o) throw new t("ids"); if (!(o instanceof Array) || o.length <= 0) throw new n("ids", "Value must be an array and have at least one element."); for (var a = e.Deferred(), l = SP.ClientContext.get_current(), u = s ? l.get_site().get_rootWeb() : l.get_web(), c = "string" == typeof r ? u.get_lists().getByTitle(r) : r, g = [], f = 0; f < o.length; f++) { var d = c.getItemById(o[f]); i ? l.load.apply(this, [d].concat(i)) : l.load(d), g.push(d) } return l.executeQueryAsync(function (e, t) { a.resolve(g, e, t) }, function (e, t) { a.reject(t, e) }), a.promise() } function i(r, o, i) { if (!r) throw new t("list"); if (!o) throw new t("newItems"); if (!(o instanceof Array) || o.length <= 0) throw new n("newItems", "Value must be an array and have at least one element."); for (var s = e.Deferred(), a = SP.ClientContext.get_current(), l = i ? a.get_site().get_rootWeb() : a.get_web(), u = "string" == typeof r ? l.get_lists().getByTitle(r) : r, c = [], g = 0; g < o.length; g++) if (o[g]) { var f = new SP.ListItemCreationInformation, d = u.addItem(f); for (var m in o[g]) if ("ID" != m) { var w = o[g][m] || null; d.set_item(m, w) } d.update(), c.push(d), a.load(d) } return a.executeQueryAsync(function (e, t) { s.resolve(c, e, t) }, function (e, t) { s.reject(t, e) }), s.promise() } function s(r, o, i) { if (!r) throw new t("list"); if (!o) throw new t("updatedItems"); if (!(o instanceof Array) || o.length <= 0) throw new n("updatedItems", "Value must be an array and have at least one element."); for (var s = e.Deferred(), a = SP.ClientContext.get_current(), l = i ? a.get_site().get_rootWeb() : a.get_web(), u = "string" == typeof r ? l.get_lists().getByTitle(r) : r, c = [], g = 0; g < o.length; g++) if (o[g] && o[g].ID && !(o[g].ID <= 0)) { var f = u.getItemById(o[g].ID); a.load(f, "ID") } return a.executeQueryAsync(function () { for (var e = 0; e < o.length; e++) if (o[e] && o[e].ID && !(o[e].ID <= 0)) { var t = u.getItemById(o[e].ID); for (var n in o[e]) if ("ID" != n) { var r = o[e][n] || null; t.set_item(n, r) } t.update(), c.push(t), a.load(t) } a.executeQueryAsync(function (e, t) { s.resolve(c, e, t) }, function (e, t) { s.reject(t, e) }) }, function (e, t) { s.reject(t) }), s.promise() } function a(e, n, o) { if (!e) throw new t("list"); if (!n) throw new t("camlQuery"); return r(e, n, ["ID"], o).then(function (t) { for (var n = [], r = 0; r < t.length; r++) n.push(t[r].get_item("ID")); return l(e, n, o) }) } function l(r, o, i) { if (!r) throw new t("list"); if (!o) throw new t("ids"); if (!(o instanceof Array) || o.length <= 0) throw new n("ids", "Value must be an array and have at least one element."); for (var s = e.Deferred(), a = SP.ClientContext.get_current(), l = i ? a.get_site().get_rootWeb() : a.get_web(), u = "string" == typeof r ? l.get_lists().getByTitle(r) : r, c = 0; c < o.length; c++) { var g = u.getItemById(o[c]); g.deleteObject() } return a.executeQueryAsync(function (e, t) { s.resolve(!0, e, t) }, function (e, t) { s.reject(t, e) }), s.promise() } function u(n, r) { if (!n) throw new t("list"); var o = e.Deferred(), i = SP.ClientContext.get_current(), s = r ? i.get_site().get_rootWeb() : i.get_web(), a = "string" == typeof n ? s.get_lists().getByTitle(n) : n; return i.load(a), i.executeQueryAsync(function (e, t) { o.resolve(a.get_id().$5_0 || "", e, t) }, function (e, t) { o.reject(t, e) }), o.promise() } function c(n) { if (!n) throw new t("userName"); var r = e.Deferred(), o = SP.ClientContext.get_current(), i = o.get_web(), s = i.ensureUser(n); return o.load(s), o.executeQueryAsync(function (e, t) { r.resolve(s, e, t) }, function (e, t) { r.reject(t, e) }), r.promise() } function g(e, t) { var n = SP.ClientContext.get_current(), r = n.get_web(), i = r.get_siteUserInfoList(); return e instanceof Array || (e = [e || _spUserId]), o(i, e, t) } function f(e) { var t = document.createElement("div"); return t.innerHTML = e, t } function d(t, n, r, o) { var i = e.Deferred(), s = { title: t, allowMaximize: !1, showClose: !o, autoSize: !0, dialogReturnValueCallback: function (e, t) { i.resolve(e == SP.UI.DialogResult.OK, t) } }; return r ? s.url = r : s.html = f("<div class='dialog-wrapper' style='padding: 5px;'>{0}</div>".format(n)), SP.UI.ModalDialog.showModalDialog(s), i.promise() } function m(e, t, n) { return d(t, null, e, n) } function w(e, t) { var n = "<div class='message message-alert'>{0}</div>".format(e); return d(t || "Information", n) } function h(e, t) { var n = "<div class='message message-error' style='color: red;'>{0}</div>".format(e); return d(t || "Error", n) } function v(e, t) { var n = "<div class='message message-error'>{0}</div>                    <div class='controls' style='margin-top: 15px; text-align: right;'>                        <button onclick='SP.UI.ModalDialog.commonModalDialogClose(SP.UI.DialogResult.OK); return false;'>OK</button>                        <button onclick='SP.UI.ModalDialog.commonModalDialogClose(SP.UI.DialogResult.cancel); return false;'>Cancel</button>                    </div>".format(e); return d(t || "Confirm", n) } function y() { null != P && (P.close(), P = null), null != b && (clearTimeout(b), b = null) } function p(e, t, n, r, o) { y(), P = SP.UI.ModalDialog.showWaitScreenWithNoClose(t || "Processing", e || "Please wait...", r || 60, o || 300), +n > 0 && (b = setTimeout(y, +n)) } function _(e, t, n, r) { function o() { return new Array } function i(e, t, n) { e.push(t), e[t] = n } function s(e) { for (var t = new Array, n = 0; n < e.length; n++) t.push(e[n]); return t } null != document.getElementById("__spPickerHasReturnValue") && (document.getElementById("__spPickerHasReturnValue").value = ""), null != document.getElementById("__spPickerReturnValueHolder") && (document.getElementById("__spPickerReturnValueHolder").value = ""), commonModalDialogReturnValue.clear(); var a; if (window.showModalDialog && !browseris.safari125up) a = window.showModalDialog(e, r, t), n && invokeModalDialogCallback(n, a); else { var l = 500, u = 550, c = "yes"; if (t) { var g, f, d = o(); -1 != t.search(/^(\s*\w+\s*:\s*.+?\s*)(;\s*\s*\w+\s*:\s*.+?\s*)*(;\s*)?$/) ? (g = /^\s*(\w+)\s*:\s*(.+?)\s*$/, f = t.split(/\s*;\s*/)) : (g = /^\s*(\w+)\s*=\s*(.+?)\s*$/, f = t.split(/\s*,\s*/)); for (var m in f) { var w = g.exec(f[m]); w && 3 == w.length && i(d, w[1].toLowerCase(), w[2]) } d.width || i(d, "width", d.dialogwidth || l), d.height || i(d, "height", d.dialogheight || u), d.scrollbars || i(d, "scrollbars", d.scroll || c), t = ""; var h = s(d); for (var v in h) t && (t += ","), t += h[v] + "=" + d[h[v]] } else t = "width=" + l + ",height=" + u; var y = window.open(e, "_blank", t + ",modal=yes,dialog=yes"); y && (y.dialogArguments = r); var p = "/Picker.aspx".toUpperCase(), _ = e.toUpperCase().indexOf(p) > -1; _ || (window.onfocus = function () { var e = null != document.getElementById("__spPickerHasReturnValue") && "1" == document.getElementById("__spPickerHasReturnValue").value || commonModalDialogReturnValue.isSet(); !y || y.closed || e ? (window.onfocus = null, n && invokeModalDialogCallback(n, a)) : y.focus() }), browseris.ie || (window.fndlgClose = n) } return a } function I() { "function" == typeof commonShowModalDialog && (window.commonShowModalDialog = _) } function D(t) { var n = []; return e.each(e("div[id*='" + t + "'], " + t).find("> span.ms-entity-resolved"), function (t, r) { var o = e(r).attr("title") || null; n.push(o) }), n } var P = null, b = null; return { getListItems: r, getListItemsByIds: o, createListItems: i, deleteListItems: a, deleteListItemsByIds: l, updateListItems: s, ensureUser: c, getUserProfile: g, getGUID: u, showSPAlert: w, showSPConfirm: v, showSPError: h, showSPPopup: m, showSPWaitDialog: p, hideSPWaitDialog: y, applyPeoplePickerFix: I, getEntitiesPeoplePicker: D } }(jQuery);