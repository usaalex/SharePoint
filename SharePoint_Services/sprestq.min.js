/* SPRest.Query OData QUERY BUILDER 0.1.0 */
/* https://github.com/usaalex/SharePoint */
/* © WM-FDH, 2016 */
var SPRest = SPRest || {}; SPRest.Query = function (e) { function t(e) { this.name = "ArgumentNullException", this.message = "Value can not be null or undefined. Parameter name: " + e, this.stack = (new Error).stack } function n(e, t) { this.name = "ArgumentException", this.message = (t || "Argument exception") + ". Parameter name: " + e, this.stack = (new Error).stack } function r(e, n, r, i) { if (e != R.and && e != R.or && null == n) throw new t("field"); if (e != R.and && e != R.or && null == r) throw new t("value"); return i && (E.push(n), n = n + "/Id," + n + "/Title"), "string" == typeof r ? r = "'" + r + "'" : "object" == typeof r && r instanceof Date ? r = "datetime'" + r.toJSON() + "'" : "boolean" == typeof r && (r = r ? "1" : "0"), x += (j ? " " : "") + e.replace("{field}", n).replace("{value}", r), $ = e, j = !1, this } function i(e, t, n) { return r.call(this, R.eq, e, t, n) } function a(e, t, n) { return r.call(this, R.lt, e, t, n) } function l(e, t, n) { return r.call(this, R.ge, e, t, n) } function u(e, t, n) { return r.call(this, R.gt, e, t, n) } function s(e, t, n) { return r.call(this, R.le, e, t, n) } function o(e, t, n) { return r.call(this, R.ne, e, t, n) } function f(e, t, n) { return r.call(this, R.endswith, e, t, n) } function c(e, t, n) { return r.call(this, R.startswith, e, t, n) } function h(e, t, n) { return r.call(this, R.substringof, e, t, n) } function d() { return r.call(this, R.and) } function w() { return r.call(this, R.or) } function g(e, t) { if (!(e instanceof Array)) throw new n("fields", "Value must be an array."); return N = e || [], k = !!t, this } function m(e) { if (isNaN(+e)) throw new n("count", 'Value must be of type "Number".'); return V = e || 0, this } function b(e) { if (!(e instanceof Array)) throw new n("fields", "Value must be an array."); return P = e || [], this } function p(e) { if (!(e instanceof Array)) throw new n("fields", "Value must be an array."); return E = E.concat(e || []), this } function v() { if (S != q) throw new Error("Parentheses are not balanced."); return A += e ? e : "", A += "?", A += x ? "&$filter=" + x : "", A += P.length > 0 ? "&$select=" + P.join(",") : "", A += E.length > 0 && P.length > 0 ? "&$expand=" + E.join(",") : "", A += N.length > 0 ? "&$orderby=" + N.join(",") + (k ? " desc" : " asc") : "", A += V > 0 ? "&$top=" + V : "" } var y = function () { return "0.1.0" }, A = "", P = [], x = "", E = [], N = [], V = 0, $ = "", j = !0, k = !1, q = 0, S = 0, R = { eq: "{field} eq {value}", lt: "{field} lt {value}", gt: "{field} gt {value}", ge: "{field} ge {value}", le: "{field} le {value}", ne: "{field} ne {value}", endswith: "endswith({field}, '{value}')", startswith: "startswith({field}, '{value}')", substringof: "substringof({field}, '{value}')", and: " and ", or: " or " }; return { eq: i, lt: a, le: s, gt: u, ge: l, ne: o, and: d, or: w, endswith: f, startswith: c, substringof: h, select: b, top: m, orderby: g, expand: p, build: v, ver: y } };